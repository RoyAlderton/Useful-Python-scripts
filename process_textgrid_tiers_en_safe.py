# -*- coding: utf-8 -*-
"""
Created on Thu May 12 13:35:28 2022

@author: Roy Alderton

This script takes a folder of Praat TextGrids generated by the 'B2P -> MAUS -> 
PHO2SYLL' pipeline in BAS Web Services for English and does the following:
    
    1. Renames the tiers with more intuitive names.
    2. Removes two unnecessary tiers.
    3. Adds a new tier called 'PHRASE' with three intervals. The first and
    third interval contain no text, while the second interval contains the
    text 'phrase'. Its boundaries correspond to the beginning and end of the
    region of interest in the stimulus. In the case of English, this is the
    beginning of the [i:] in 'Cleo' and the end of the target nasal sound or
    its oral counterpart.
    4. Makes a number of changes to specific intervals to fix frequent errors 
    made by MAUS when transcribing. The fixes required for English here are
    more extensive than those needed for German (dealt with in the 'de'
    version of this script), but much less than for French ('fr').
      
The script should be saved in a folder with a sub-folder called 'TextGrids',
where the TextGrids to be processed should be located. You can then use the
P_text-grid-reviewermitZoom.praat Praat script to view (and edit) the TextGrids
and their corresponding WAV files at the same time.
 
This version of the script makes a copy of the TextGrids folder rather than 
over-writing the original TextGrids.

The script should be run in the command line by navigating to the correct
folder and entering a command in the following format:
    
    python process_textgrid_tiers_en_safe.py
    
If using Linux, you may need to replace 'python' with 'python3'.

You may not be able to run this file from the IPS server, in which case,
just copy everything to your computer and run it locally.

You may need to install the textgrids library if it isn't already on your
computer. You can do this by entering the following into the command prompt:
    
    pip install praat-textgrids
    
There is currently a bug in the library's set-up files that causes some Windows
computers to fail to install the library correctly via pip. If this occurs,
download the library as a zip file from the project's GitHub page and then 
extract it manually to the relevant folder in your computer's Python 
installation. See links below for details.

https://github.com/Legisign/Praat-textgrids
https://youtu.be/DKR0VYSOqLc

"""
# import required libraries
import os
import shutil
import re
import textgrids

def fix_sound_syllable(interval):
    """
    Applies simple transcription corrections to intervals in the the sound and
    / or syllable tiers of the English nasality TextGrids by replacing the text.

    Parameters
    ----------
    interval : object class of an IntervalTier from the textgrids library
        The interval whose text you want to edit. See the library documentation
        for details on interval objects.

    Returns
    -------
    None.

    """

    interval.text = re.sub(r'u$|u\s', 'u:', interval.text) # Set GOOSE to [u:]
    interval.text = interval.text.replace('s u:n', 's u: n') # Set GOOSE to [u:]
    interval.text = interval.text.replace('@U', 'oU') # Convert GOAT to AmE
    interval.text = interval.text.replace('Q', 'A') # Convert LOT to AmE
    interval.text = interval.text.replace('R', 'r') # Fix [r]
    interval.text = interval.text.replace('3`', '@r') # Fix lettER; here we're using [@r] instead of X-SAMPA [@`] for a rhotic schwa
    interval.text = interval.text.replace('h l', 'h i: l') # Fix "he'll"
  # interval.text = interval.text.replace('{', 'a') # Set TRAP to [a]; could be added later
    
    # Add [d] to 'Leonard' in the syllable tier
    if 'Leonard' in file and interval.text == 'n @r':
        interval.text = interval.text.replace('n @r', 'n @r d')
        
    # Replace glottal stop [?] with [t] for all tokens except 'own' and 'oat'
    # (where a glottal stop may be used to separate the target from 'Cleo').
    if 'p13' not in file:
        interval.text = interval.text.replace('?', 't')
        
    # Move [N] from the onset of the second syllable to the coda of the first
    # syllable in 'ringer' (syllable tier)
    if 'ringer' in file:
        interval.text = interval.text.replace('r I', 'r I N')
        interval.text = interval.text.replace('N @r', '@r')

# Specify folder path where the TextGrids are located
source_path = "TextGrids/"

# Specify folder path for the copy
copy_path = "TextGrids_copy/"

# Make a copy of the folder
shutil.copytree(source_path, copy_path, dirs_exist_ok = True)

# Get a list of TextGrid files in the folder
dir_list = os.listdir(copy_path)
tg_list = [file for file in dir_list if 'practice' not in file and file.endswith('.TextGrid')]

# For each TextGrid file in the list...
for file in tg_list:
    
    # Load the file as a TextGrid in Python
    tg = textgrids.TextGrid(copy_path + file)
    
    # Delete the unneeded tiers
    del tg['KAN-MAU']
    del tg['KAS-MAU']
    
    # Rename the word tier
    tg['WORD'] = tg.pop('ORT-MAU')
         
    # Get the end time of the final interval on the sound (MAU) tier.
    # This is so that the end time of the new phrase tier can be specified 
    # correctly.
    file_end = tg['MAU'][-1].xmax
    
    # Get the start time of [i:] intervals on the sound (MAU) tier.
    # The first of these (corresponding to the [i:] in 'Cleo' will be used as 
    # the start of the 'phrase' interval on the phrase tier.
    i_start_time = []
    for interval in tg['MAU']:
        if interval.text == 'i:':
            i_start_time.append(interval.xmin)   
    
    # Get the end time of the target nasal / oral interval on the sound (MAU) 
    # tier.
    # This will be used as the end of the 'phrase' interval on the phrase tier.
    nasals_orals = ['m', 'n', 'N', 'p', 't', 'k']
    nasal_oral_end_time = []
    for interval in tg['MAU']:
        if interval.text in nasals_orals:
            nasal_oral_end_time.append(interval.xmax)    
    
    # Specify the three intervals for the new phrase tier
    
    # The first item (index [0]) in i_start_time is used, i.e. the [i:] in
    # 'Cleo'. This is because some items have another [i:] later (e.g. 'rocky').
    
    # The third item (index [2]) in nasal_oral_end_time is used.
    # This is because all items have a [t] in 'tell', then a [k] in 'Cleo', then 
    # the target, then potentially more of the same sound (e.g. another [t] in
    # 'met'), then the [n] in 'soon'. However, these other sounds always come 
    # after our target sound in the region of interest, so index [2] is reliable.
       
    interval_1 = textgrids.Interval(text = '', xmin = 0.0, xmax = i_start_time[0])
    interval_2 = textgrids.Interval(text = 'phrase', xmin = i_start_time[0], xmax = nasal_oral_end_time[2])
    interval_3 = textgrids.Interval(text = '', xmin = nasal_oral_end_time[2], xmax = file_end)
    
    # Specify the new phrase tier with the three intervals
    tg['PHRASE'] = textgrids.Tier(data = [interval_1, interval_2, interval_3])
               
    # Over-write empty labels on the word tier with '<p:>'
    for interval in tg['WORD']:
        if interval.text == '':
            interval.text = '<p:>'
    
    # Rename the sound and syllable tiers
    # This has to be done last to preserve the tier order.
    tg['SOUND'] = tg.pop('MAU')
    tg['SYLLABLE'] = tg.pop('MAS')
    
    
    ### End of basic steps
    
    
    ### Change specific intervals on the sound and syllable tiers
        
    # Make simple transcription fixes in the sound and syllable tiers
    for interval in tg['SOUND']:
        fix_sound_syllable(interval)
    
    for interval in tg['SYLLABLE']:
        fix_sound_syllable(interval)
        
        
    ## Sound tier
    for count, interval in enumerate(tg['SOUND']):
            
        
        # he'll - add [i:]
        if interval.text == 'h' and tg['SOUND'][count + 1].text == 'l':
            index_no = count # save index of this interval, as this will be needed to add the new one
            duration_proportion = interval.xmin + interval.dur * 0.67 # define the boundary between the current interval and its new neighbour to the right as a certain proportion of its current duration
            tg['SOUND'].insert(index_no + 1, textgrids.Interval(text = 'i:', xmin = duration_proportion, xmax = interval.xmax)) # insert a new interval to the right of the current interval, using the proportion defined earlier as its left boundary, and the right boundary of the current interval as its right boundary
            interval.xmax = duration_proportion # update the right boundary of the current interval to match the left boundary of its new neighbour to the right
        
        
        # Leonard - add [d]
        if 'Leonard' in file and interval.text == '@r' and tg['SOUND'][count + 1].text == 's':
            index_no = count # save index of this interval, as this will be needed to add the new one
            duration_proportion = interval.xmin + interval.dur * 0.75 # define the boundary between the current interval and its new neighbour to the right as a certain proportion of its current duration
            tg['SOUND'].insert(index_no + 1, textgrids.Interval(text = 'd', xmin = duration_proportion, xmax = interval.xmax)) # insert a new interval to the right of the current interval, using the proportion defined earlier as its left boundary, and the right boundary of the current interval as its right boundary
            interval.xmax = duration_proportion # update the right boundary of the current interval to match the left boundary of its new neighbour to the right
            
            
        # Get offset of [N] in 'ringer' for syllable adjustment below
        if 'ringer' in file and interval.text == 'N':
            ringer_N_offset = interval.xmax
    
    
    
    ## Syllable tier
    for count, interval in enumerate(tg['SYLLABLE']):
        
        
        # Move the right boundary of the first syllable in 'ringer' in line
        # with the offset of N obtained above
        if 'ringer' in file and interval.text == 'r I N':
            interval.xmax = ringer_N_offset
        
        # Move the left boundary of the second syllable in 'ringer' in line
        # with the offset of N obtained above
        if 'ringer' in file and interval.text == '@r':
            interval.xmin = ringer_N_offset
    

    ### End of specific interval changes
    

    # Write the new TextGrid into the copy of the TextGrids folder   
    tg.write(copy_path + file)
    
    # Print a message to check that the file has been successfully processed
    print('Successfully processed {}!'.format(file))